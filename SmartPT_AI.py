import re
import os
import sys
import json
import requests
from datetime import datetime, timedelta

LOG_FILE = "/var/ossec/logs/active-responses.log"
ALERT_FILE = "/var/ossec/logs/all_alert_data.json"
OUTPUT_FILE = "/var/ossec/logs/extracted_data.json"
THROTTLE_FILE = "/var/ossec/logs/throttle_tracker.json"  # File to track last sent times
API_ENDPOINT = "https://apiv2.smartpt.co.il/aialerts"
THROTTLE_INTERVAL = timedelta(minutes=100)  # Wait 1 minute before sending the same alert

# Hardcoded SHA-256 key for customer identification
SHA256_KEY = ""

def log_message(message):
    """Logs a message with a timestamp to the log file."""
    with open(LOG_FILE, "a") as log_file:
        log_file.write(f"[{datetime.now()}] {message}\n")

def read_json_file(file_path):
    """Reads and returns the raw JSON content from the specified file."""
    try:
        with open(file_path, "r") as json_file:
            return json_file.read()
    except Exception as e:
        log_message(f"Error reading JSON file: {e}")
        sys.exit(1)

def extract_fields(json_string):
    """Extracts relevant fields using regex patterns."""
    patterns = {
        'alert_id': r'"id":"(.*?)"',
        'timestamp': r'"timestamp":"(.*?)"',
        'description': r'"description":"(.*?)"',
        'agent_name': r'"agent":{.*?"name":"(.*?)"',
        'agent_id': r'"agent":{.*?"id":"(.*?)"',
        'agent_ip': r'"agent":{.*?"ip":"(.*?)"',
        'rule_id': r'"rule":{.*?"id":"(.*?)"',
        'mitre_tactic': r'"mitre":{.*?"tactic":\["(.*?)"\]',
        'mitre_technique': r'"mitre":{.*?"technique":\["(.*?)"\]',
        'event_id': r'"eventID":"(.*?)"',
        'process_id': r'"processID":"(.*?)"',
        'thread_id': r'"threadID":"(.*?)"',
        'system_time': r'"systemTime":"(.*?)"',
        'event_record_id': r'"eventRecordID":"(.*?)"',
        'severity_value': r'"severityValue":"(.*?)"',
        'subject_user_name': r'"subjectUserName":"(.*?)"',
        'subject_user_sid': r'"subjectUserSid":"(.*?)"',
        'target_user_name': r'"targetUserName":"(.*?)"',
        'target_user_sid': r'"targetUserSid":"(.*?)"',
        'process_name': r'"processName":"(.*?)"',
        'logon_type': r'"logonType":"(.*?)"',
        'logon_guid': r'"logonGuid":"(.*?)"',
        'authentication_package_name': r'"authenticationPackageName":"(.*?)"',
        'logon_process_name': r'"logonProcessName":"(.*?)"',
        'workstation_name': r'"workstationName":"(.*?)"',
        'source_ip': r'"ipAddress":"(.*?)"',
        'source_port': r'"ipPort":"(.*?)"',
        'impersonation_level': r'"impersonationLevel":"(.*?)"',
        'elevated_token': r'"elevatedToken":"(.*?)"',
        'firedtimes': r'"firedtimes":(.*?)',
        'script_block_id': r'"scriptBlockId":"(.*?)"',
        'script_block_text': r'"scriptBlockText":"(.*?)"',
        'computer': r'"computer":"(.*?)"',
        'provider_name': r'"providerName":"(.*?)"',
        'level': r'"level":"(.*?)"',
        'channel': r'"channel":"(.*?)"',
        'keywords': r'"keywords":"(.*?)"',
        'opcode': r'"opcode":"(.*?)"',
        'task': r'"task":"(.*?)"',
        'message': r'"message":"(.*?)"',
        'version': r'"version":"(.*?)"',
        'manager_name': r'"manager":{.*?"name":"(.*?)"',
        'location': r'"location":"(.*?)"',
        'decoder_name': r'"decoder":{.*?"name":"(.*?)"',
###add more
'action': r'"Action":"(.*?)"',
'actor': r'"Actor":"(.*?)"',
'attributes': r'"Attributes":"(.*?)"',
'clientip': r'"ClientIP":"(.*?)"',
'geolocation': r'"GeoLocation":"(.*?)"',
'id': r'"ID":"(.*?)"',
'operation': r'"Operation":"(.*?)"',
'resultstatus': r'"ResultStatus":"(.*?)"',
'subscription': r'"Subscription":"(.*?)"',
'type': r'"Type":"(.*?)"',
'userid': r'"UserId":"(.*?)"',
'_comment': r'"_comment":"(.*?)"',
'a0': r'"a0":"(.*?)"',
'a1': r'"a1":"(.*?)"',
'a2': r'"a2":"(.*?)"',
'a3': r'"a3":"(.*?)"',
'access_complexity': r'"access_complexity":"(.*?)"',
'accountexpires': r'"accountExpires":"(.*?)"',
'accountid': r'"accountId":"(.*?)"',
'acct': r'"acct":"(.*?)"',
'accumulate': r'"accumulate":"(.*?)"',
'action': r'"action":"(.*?)"',
'actor': r'"actor":"(.*?)"',
'actordisplayname': r'"actorDisplayName":"(.*?)"',
'actor_location': r'"actor_location":"(.*?)"',
'adapter': r'"adapter":"(.*?)"',
'address': r'"address":"(.*?)"',
'agent': r'"agent":"(.*?)"',
'alertweburl': r'"alertWebUrl":"(.*?)"',
'alert_id': r'"alert_id":"(.*?)"',
'appliedconditionalaccesspolicies': r'"appliedConditionalAccessPolicies":"(.*?)"',
'arch': r'"arch":"(.*?)"',
'architecture': r'"architecture":"(.*?)"',
'area_code': r'"area_code":"(.*?)"',
'args': r'"args":"(.*?)"',
'assignedto': r'"assignedTo":"(.*?)"',
'assigner': r'"assigner":"(.*?)"',
'attack_vector': r'"attack_vector":"(.*?)"',
'audit': r'"audit":"(.*?)"',
'auid': r'"auid":"(.*?)"',
'authanswer': r'"authAnswer":"(.*?)"',
'authentication': r'"authentication":"(.*?)"',
'authenticationpackagename': r'"authenticationPackageName":"(.*?)"',
'availability': r'"availability":"(.*?)"',
'aws': r'"aws":"(.*?)"',
'base_score': r'"base_score":"(.*?)"',
'benchmark': r'"benchmark":"(.*?)"',
'binary': r'"binary":"(.*?)"',
'broadcast': r'"broadcast":"(.*?)"',
'build': r'"build":"(.*?)"',
'bytes': r'"bytes":"(.*?)"',
'calendartime': r'"calendarTime":"(.*?)"',
'calltrace': r'"callTrace":"(.*?)"',
'category': r'"category":"(.*?)"',
'channel': r'"channel":"(.*?)"',
'check': r'"check":"(.*?)"',
'cis': r'"cis":"(.*?)"',
'cis_csc': r'"cis_csc":"(.*?)"',
'city_name': r'"city_name":"(.*?)"',
'classification': r'"classification":"(.*?)"',
'cloud protection intelligence compilation timestamp': r'"cloud protection intelligence Compilation Timestamp":"(.*?)"',
'cloud protection intelligence type index': r'"cloud protection intelligence Type Index":"(.*?)"',
'cloud protection intelligence type': r'"cloud protection intelligence Type":"(.*?)"',
'cloud protection intelligence version': r'"cloud protection intelligence Version":"(.*?)"',
'cluster': r'"cluster":"(.*?)"',
'cmd': r'"cmd":"(.*?)"',
'codename': r'"codename":"(.*?)"',
'command': r'"command":"(.*?)"',
'commandline': r'"commandLine":"(.*?)"',
'comments': r'"comments":"(.*?)"',
'company': r'"company":"(.*?)"',
'compliance': r'"compliance":"(.*?)"',
'computer': r'"computer":"(.*?)"',
'condition': r'"condition":"(.*?)"',
'confidentiality_impact': r'"confidentiality_impact":"(.*?)"',
'content': r'"content":"(.*?)"',
'continent_code': r'"continent_code":"(.*?)"',
'coordinates': r'"coordinates":"(.*?)"',
'count': r'"count":"(.*?)"',
'country_code': r'"country_code":"(.*?)"',
'country_code2': r'"country_code2":"(.*?)"',
'country_code3': r'"country_code3":"(.*?)"',
'country_name': r'"country_name":"(.*?)"',
'cpu_cores': r'"cpu_cores":"(.*?)"',
'cpu_mhz': r'"cpu_mhz":"(.*?)"',
'cpu_name': r'"cpu_name":"(.*?)"',
'createdat': r'"createdAt":"(.*?)"',
'createddatetime': r'"createdDateTime":"(.*?)"',
'creationutctime': r'"creationUtcTime":"(.*?)"',
'current engine version': r'"current Engine Version":"(.*?)"',
'current security intelligence version': r'"current security intelligence Version":"(.*?)"',
'currentdirectory': r'"currentDirectory":"(.*?)"',
'cve': r'"cve":"(.*?)"',
'cve_version': r'"cve_version":"(.*?)"',
'cvss': r'"cvss":"(.*?)"',
'cvss2': r'"cvss2":"(.*?)"',
'cvss3': r'"cvss3":"(.*?)"',
'cwd': r'"cwd":"(.*?)"',
'cwe_reference': r'"cwe_reference":"(.*?)"',
'data': r'"data":"(.*?)"',
'decoder': r'"decoder":"(.*?)"',
'description': r'"description":"(.*?)"',
'destinationip': r'"destinationIp":"(.*?)"',
'destinationisipv6': r'"destinationIsIpv6":"(.*?)"',
'destinationport': r'"destinationPort":"(.*?)"',
'details': r'"details":"(.*?)"',
'detectionsource': r'"detectionSource":"(.*?)"',
'detectorid': r'"detectorId":"(.*?)"',
'determination': r'"determination":"(.*?)"',
'dev': r'"dev":"(.*?)"',
'dhcp': r'"dhcp":"(.*?)"',
'diff': r'"diff":"(.*?)"',
'directory': r'"directory":"(.*?)"',
'displayname': r'"displayName":"(.*?)"',
'display_version': r'"display_version":"(.*?)"',
'dma_code': r'"dma_code":"(.*?)"',
'docker': r'"docker":"(.*?)"',
'domain': r'"domain":"(.*?)"',
'dstaddr': r'"dstaddr":"(.*?)"',
'dstip': r'"dstip":"(.*?)"',
'dstport': r'"dstport":"(.*?)"',
'dstuser': r'"dstuser":"(.*?)"',
'effective_user': r'"effective_user":"(.*?)"',
'egid': r'"egid":"(.*?)"',
'egroup': r'"egroup":"(.*?)"',
'elevatedtoken': r'"elevatedToken":"(.*?)"',
'end': r'"end":"(.*?)"',
'enforcing': r'"enforcing":"(.*?)"',
'engine version': r'"engine version":"(.*?)"',
'error': r'"error":"(.*?)"',
'euid': r'"euid":"(.*?)"',
'euser': r'"euser":"(.*?)"',
'event': r'"event":"(.*?)"',
'eventfirstseen': r'"eventFirstSeen":"(.*?)"',
'eventid': r'"eventID":"(.*?)"',
'eventlastseen': r'"eventLastSeen":"(.*?)"',
'eventrecordid': r'"eventRecordID":"(.*?)"',
'eventsourcename': r'"eventSourceName":"(.*?)"',
'eventtype': r'"eventType":"(.*?)"',
'eventdata': r'"eventdata":"(.*?)"',
'evidence': r'"evidence":"(.*?)"',
'exe': r'"exe":"(.*?)"',
'execve': r'"execve":"(.*?)"',
'exit': r'"exit":"(.*?)"',
'exploitability_score': r'"exploitability_score":"(.*?)"',
'extrainfo': r'"extraInfo":"(.*?)"',
'extra_args': r'"extra_args":"(.*?)"',
'extra_data': r'"extra_data":"(.*?)"',
'fail': r'"fail":"(.*?)"',
'failed': r'"failed":"(.*?)"',
'fgroup': r'"fgroup":"(.*?)"',
'file': r'"file":"(.*?)"',
'fileversion': r'"fileVersion":"(.*?)"',
'firedtimes': r'"firedtimes":"(.*?)"',
'firstactivitydatetime': r'"firstActivityDateTime":"(.*?)"',
'format': r'"format":"(.*?)"',
'found': r'"found":"(.*?)"',
'frequency': r'"frequency":"(.*?)"',
'fsgid': r'"fsgid":"(.*?)"',
'fsuid': r'"fsuid":"(.*?)"',
'fts': r'"fts":"(.*?)"',
'ftscomment': r'"ftscomment":"(.*?)"',
'full_log': r'"full_log":"(.*?)"',
'gateway': r'"gateway":"(.*?)"',
'gcp': r'"gcp":"(.*?)"',
'gdpr': r'"gdpr":"(.*?)"',
'generated_cpe': r'"generated_cpe":"(.*?)"',
'geolocation': r'"geoLocation":"(.*?)"',
'gid': r'"gid":"(.*?)"',
'gid_after': r'"gid_after":"(.*?)"',
'gid_before': r'"gid_before":"(.*?)"',
'github': r'"github":"(.*?)"',
'gname_after': r'"gname_after":"(.*?)"',
'gname_before': r'"gname_before":"(.*?)"',
'gpg13': r'"gpg13":"(.*?)"',
'grantedaccess': r'"grantedAccess":"(.*?)"',
'group': r'"group":"(.*?)"',
'groups': r'"groups":"(.*?)"',
'hresult': r'"hResult":"(.*?)"',
'hard_links': r'"hard_links":"(.*?)"',
'hardware': r'"hardware":"(.*?)"',
'hashes': r'"hashes":"(.*?)"',
'hipaa': r'"hipaa":"(.*?)"',
'homedirectory': r'"homeDirectory":"(.*?)"',
'homepath': r'"homePath":"(.*?)"',
'host': r'"host":"(.*?)"',
'hostname': r'"hostname":"(.*?)"',
'id': r'"id":"(.*?)"',
'identifiers': r'"identifiers":"(.*?)"',
'iface': r'"iface":"(.*?)"',
'image': r'"image":"(.*?)"',
'imageloaded': r'"imageLoaded":"(.*?)"',
'impact_score': r'"impact_score":"(.*?)"',
'impersonationlevel': r'"impersonationLevel":"(.*?)"',
'incidentid': r'"incidentId":"(.*?)"',
'incidentweburl': r'"incidentWebUrl":"(.*?)"',
'info': r'"info":"(.*?)"',
'initiated': r'"initiated":"(.*?)"',
'inode': r'"inode":"(.*?)"',
'inode_after': r'"inode_after":"(.*?)"',
'inode_before': r'"inode_before":"(.*?)"',
'input': r'"input":"(.*?)"',
'install_time': r'"install_time":"(.*?)"',
'instancedetails': r'"instanceDetails":"(.*?)"',
'integration': r'"integration":"(.*?)"',
'integritylevel': r'"integrityLevel":"(.*?)"',
'integrity_impact': r'"integrity_impact":"(.*?)"',
'invalid': r'"invalid":"(.*?)"',
'ip': r'"ip":"(.*?)"',
'ipaddress': r'"ipAddress":"(.*?)"',
'ipaddressv4': r'"ipAddressV4":"(.*?)"',
'ipport': r'"ipPort":"(.*?)"',
'ipv4': r'"ipv4":"(.*?)"',
'ipv6': r'"ipv6":"(.*?)"',
'jsonpayload': r'"jsonPayload":"(.*?)"',
'key': r'"key":"(.*?)"',
'keylength': r'"keyLength":"(.*?)"',
'keywords': r'"keywords":"(.*?)"',
'labels': r'"labels":"(.*?)"',
'lastactivitydatetime': r'"lastActivityDateTime":"(.*?)"',
'lastupdatedatetime': r'"lastUpdateDateTime":"(.*?)"',
'latitude': r'"latitude":"(.*?)"',
'launchtime': r'"launchTime":"(.*?)"',
'level': r'"level":"(.*?)"',
'list': r'"list":"(.*?)"',
'local_ip': r'"local_ip":"(.*?)"',
'local_port': r'"local_port":"(.*?)"',
'location': r'"location":"(.*?)"',
'log_info': r'"log_info":"(.*?)"',
'login_user': r'"login_user":"(.*?)"',
'logonguid': r'"logonGuid":"(.*?)"',
'logonhours': r'"logonHours":"(.*?)"',
'logonid': r'"logonId":"(.*?)"',
'logonprocessname': r'"logonProcessName":"(.*?)"',
'logontype': r'"logonType":"(.*?)"',
'longitude': r'"longitude":"(.*?)"',
'mac': r'"mac":"(.*?)"',
'mail': r'"mail":"(.*?)"',
'major': r'"major":"(.*?)"',
'malicious': r'"malicious":"(.*?)"',
'manager': r'"manager":"(.*?)"',
'md5': r'"md5":"(.*?)"',
'md5_after': r'"md5_after":"(.*?)"',
'md5_before': r'"md5_before":"(.*?)"',
'membersid': r'"memberSid":"(.*?)"',
'message': r'"message":"(.*?)"',
'messagenumber': r'"messageNumber":"(.*?)"',
'messagetotal': r'"messageTotal":"(.*?)"',
'metric': r'"metric":"(.*?)"',
'minor': r'"minor":"(.*?)"',
'mitre': r'"mitre":"(.*?)"',
'mitretechniques': r'"mitreTechniques":"(.*?)"',
'mode': r'"mode":"(.*?)"',
'module': r'"module":"(.*?)"',
'ms-graph': r'"ms-graph":"(.*?)"',
'mtime_after': r'"mtime_after":"(.*?)"',
'mtime_before': r'"mtime_before":"(.*?)"',
'mtu': r'"mtu":"(.*?)"',
'multiarch': r'"multiarch":"(.*?)"',
'name': r'"name":"(.*?)"',
'netinfo': r'"netinfo":"(.*?)"',
'netmask': r'"netmask":"(.*?)"',
'networkconnectionaction': r'"networkConnectionAction":"(.*?)"',
'networkinterfaces': r'"networkInterfaces":"(.*?)"',
'newthreadid': r'"newThreadId":"(.*?)"',
'newtime': r'"newTime":"(.*?)"',
'newuacvalue': r'"newUacValue":"(.*?)"',
'nice': r'"nice":"(.*?)"',
'nist_800_53': r'"nist_800_53":"(.*?)"',
'nlwp': r'"nlwp":"(.*?)"',
'node': r'"node":"(.*?)"',
'notchecked': r'"notchecked":"(.*?)"',
'office365': r'"office365":"(.*?)"',
'offset': r'"offset":"(.*?)"',
'old-auid': r'"old-auid":"(.*?)"',
'old-ses': r'"old-ses":"(.*?)"',
'olduacvalue': r'"oldUacValue":"(.*?)"',
'old_enforcing': r'"old_enforcing":"(.*?)"',
'old_prom': r'"old_prom":"(.*?)"',
'op': r'"op":"(.*?)"',
'opcode': r'"opcode":"(.*?)"',
'org': r'"org":"(.*?)"',
'origin': r'"origin":"(.*?)"',
'originalfilename': r'"originalFileName":"(.*?)"',
'os': r'"os":"(.*?)"',
'oscap': r'"oscap":"(.*?)"',
'osquery': r'"osquery":"(.*?)"',
'oval': r'"oval":"(.*?)"',
'pack': r'"pack":"(.*?)"',
'package': r'"package":"(.*?)"',
'param1': r'"param1":"(.*?)"',
'param2': r'"param2":"(.*?)"',
'param3': r'"param3":"(.*?)"',
'param4': r'"param4":"(.*?)"',
'parameters': r'"parameters":"(.*?)"',
'parent': r'"parent":"(.*?)"',
'parentcommandline': r'"parentCommandLine":"(.*?)"',
'parentimage': r'"parentImage":"(.*?)"',
'parentprocessguid': r'"parentProcessGuid":"(.*?)"',
'parentprocessid': r'"parentProcessId":"(.*?)"',
'parentuser': r'"parentUser":"(.*?)"',
'pass': r'"pass":"(.*?)"',
'passed': r'"passed":"(.*?)"',
'passwordlastset': r'"passwordLastSet":"(.*?)"',
'patch': r'"patch":"(.*?)"',
'path': r'"path":"(.*?)"',
'pci_dss': r'"pci_dss":"(.*?)"',
'perm_after': r'"perm_after":"(.*?)"',
'perm_before': r'"perm_before":"(.*?)"',
'permalink': r'"permalink":"(.*?)"',
'persistence limit type index': r'"persistence Limit Type Index":"(.*?)"',
'persistence limit type': r'"persistence Limit Type":"(.*?)"',
'persistence limit value': r'"persistence Limit Value":"(.*?)"',
'persistence path': r'"persistence Path":"(.*?)"',
'pgrp': r'"pgrp":"(.*?)"',
'pid': r'"pid":"(.*?)"',
'platform version': r'"platform version":"(.*?)"',
'platform': r'"platform":"(.*?)"',
'policy': r'"policy":"(.*?)"',
'policy_id': r'"policy_id":"(.*?)"',
'port': r'"port":"(.*?)"',
'positives': r'"positives":"(.*?)"',
'postal_code': r'"postal_code":"(.*?)"',
'ppid': r'"ppid":"(.*?)"',
'predecoder': r'"predecoder":"(.*?)"',
'previoustime': r'"previousTime":"(.*?)"',
'previous_log': r'"previous_log":"(.*?)"',
'previous_output': r'"previous_output":"(.*?)"',
'previous_result': r'"previous_result":"(.*?)"',
'primarygroupid': r'"primaryGroupId":"(.*?)"',
'priority': r'"priority":"(.*?)"',
'privateipaddress': r'"privateIpAddress":"(.*?)"',
'privileges_required': r'"privileges_required":"(.*?)"',
'process': r'"process":"(.*?)"',
'processguid': r'"processGuid":"(.*?)"',
'processid': r'"processID":"(.*?)"',
'processid': r'"processId":"(.*?)"',
'processname': r'"processName":"(.*?)"',
'processor': r'"processor":"(.*?)"',
'product name': r'"product Name":"(.*?)"',
'product version': r'"product Version":"(.*?)"',
'product': r'"product":"(.*?)"',
'profile': r'"profile":"(.*?)"',
'profilepath': r'"profilePath":"(.*?)"',
'program': r'"program":"(.*?)"',
'program_name': r'"program_name":"(.*?)"',
'project_id': r'"project_id":"(.*?)"',
'prom': r'"prom":"(.*?)"',
'protocol': r'"protocol":"(.*?)"',
'provideralertid': r'"providerAlertId":"(.*?)"',
'providerguid': r'"providerGuid":"(.*?)"',
'providername': r'"providerName":"(.*?)"',
'publicip': r'"publicIp":"(.*?)"',
'published': r'"published":"(.*?)"',
'queryname': r'"queryName":"(.*?)"',
'ram_free': r'"ram_free":"(.*?)"',
'ram_total': r'"ram_total":"(.*?)"',
'ram_usage': r'"ram_usage":"(.*?)"',
'rationale': r'"rationale":"(.*?)"',
'real_region_name': r'"real_region_name":"(.*?)"',
'reason': r'"reason":"(.*?)"',
'references': r'"references":"(.*?)"',
'region': r'"region":"(.*?)"',
'region_name': r'"region_name":"(.*?)"',
'registry': r'"registry":"(.*?)"',
'relationship': r'"relationship":"(.*?)"',
'release': r'"release":"(.*?)"',
'release_version': r'"release_version":"(.*?)"',
'remediation': r'"remediation":"(.*?)"',
'remediationstatus': r'"remediationStatus":"(.*?)"',
'remoteipdetails': r'"remoteIpDetails":"(.*?)"',
'remote_ip': r'"remote_ip":"(.*?)"',
'remote_port': r'"remote_port":"(.*?)"',
'repo': r'"repo":"(.*?)"',
'res': r'"res":"(.*?)"',
'resident': r'"resident":"(.*?)"',
'resolveddatetime': r'"resolvedDateTime":"(.*?)"',
'resource': r'"resource":"(.*?)"',
'response': r'"response":"(.*?)"',
'responsecode': r'"responseCode":"(.*?)"',
'result': r'"result":"(.*?)"',
'return_code': r'"return_code":"(.*?)"',
'rgroup': r'"rgroup":"(.*?)"',
'roles': r'"roles":"(.*?)"',
'rule': r'"rule":"(.*?)"',
'rulename': r'"ruleName":"(.*?)"',
'rule_title': r'"rule_title":"(.*?)"',
'ruser': r'"ruser":"(.*?)"',
'rx_bytes': r'"rx_bytes":"(.*?)"',
'rx_dropped': r'"rx_dropped":"(.*?)"',
'rx_errors': r'"rx_errors":"(.*?)"',
'rx_packets': r'"rx_packets":"(.*?)"',
'rx_queue': r'"rx_queue":"(.*?)"',
's3bucket': r'"s3bucket":"(.*?)"',
'sid': r'"sID":"(.*?)"',
'samaccountname': r'"samAccountName":"(.*?)"',
'sca': r'"sca":"(.*?)"',
'scan id': r'"scan ID":"(.*?)"',
'scan parameters index': r'"scan Parameters Index":"(.*?)"',
'scan parameters': r'"scan Parameters":"(.*?)"',
'scan type index': r'"scan Type Index":"(.*?)"',
'scan type': r'"scan Type":"(.*?)"',
'scan': r'"scan":"(.*?)"',
'scan_date': r'"scan_date":"(.*?)"',
'scan_id': r'"scan_id":"(.*?)"',
'schemaversion': r'"schemaVersion":"(.*?)"',
'scope': r'"scope":"(.*?)"',
'score': r'"score":"(.*?)"',
'scriptblockid': r'"scriptBlockId":"(.*?)"',
'scriptblocktext': r'"scriptBlockText":"(.*?)"',
'scriptpath': r'"scriptPath":"(.*?)"',
'section': r'"section":"(.*?)"',
'security intelligence type index': r'"security intelligence Type Index":"(.*?)"',
'security intelligence version': r'"security intelligence version":"(.*?)"',
'serial': r'"serial":"(.*?)"',
'service': r'"service":"(.*?)"',
'servicesource': r'"serviceSource":"(.*?)"',
'session': r'"session":"(.*?)"',
'severity': r'"severity":"(.*?)"',
'severityvalue': r'"severityValue":"(.*?)"',
'sgid': r'"sgid":"(.*?)"',
'sgroup': r'"sgroup":"(.*?)"',
'sha1': r'"sha1":"(.*?)"',
'sha1_after': r'"sha1_after":"(.*?)"',
'sha1_before': r'"sha1_before":"(.*?)"',
'sha256_after': r'"sha256_after":"(.*?)"',
'sha256_before': r'"sha256_before":"(.*?)"',
'share': r'"share":"(.*?)"',
'signature': r'"signature":"(.*?)"',
'signaturestatus': r'"signatureStatus":"(.*?)"',
'signed': r'"signed":"(.*?)"',
'size': r'"size":"(.*?)"',
'size_after': r'"size_after":"(.*?)"',
'size_before': r'"size_before":"(.*?)"',
'source': r'"source":"(.*?)"',
'sourceimage': r'"sourceImage":"(.*?)"',
'sourceip': r'"sourceIp":"(.*?)"',
'sourceisipv6': r'"sourceIsIpv6":"(.*?)"',
'sourceport': r'"sourcePort":"(.*?)"',
'sourceprocessguid': r'"sourceProcessGUID":"(.*?)"',
'sourceprocessguid': r'"sourceProcessGuid":"(.*?)"',
'sourceprocessid': r'"sourceProcessId":"(.*?)"',
'sourcethreadid': r'"sourceThreadId":"(.*?)"',
'sourceuser': r'"sourceUser":"(.*?)"',
'source_ip_address': r'"source_ip_address":"(.*?)"',
'source_type': r'"source_type":"(.*?)"',
'srcaddr': r'"srcaddr":"(.*?)"',
'srcip': r'"srcip":"(.*?)"',
'srcport': r'"srcport":"(.*?)"',
'srcuser': r'"srcuser":"(.*?)"',
'start': r'"start":"(.*?)"',
'startaddress': r'"startAddress":"(.*?)"',
'start_time': r'"start_time":"(.*?)"',
'state': r'"state":"(.*?)"',
'status': r'"status":"(.*?)"',
'stime': r'"stime":"(.*?)"',
'subj': r'"subj":"(.*?)"',
'subjectdomainname': r'"subjectDomainName":"(.*?)"',
'subjectlogonid': r'"subjectLogonId":"(.*?)"',
'subjectusername': r'"subjectUserName":"(.*?)"',
'subjectusersid': r'"subjectUserSid":"(.*?)"',
'subscription_name': r'"subscription_name":"(.*?)"',
'success': r'"success":"(.*?)"',
'suid': r'"suid":"(.*?)"',
'suser': r'"suser":"(.*?)"',
'syscall': r'"syscall":"(.*?)"',
'syscheck': r'"syscheck":"(.*?)"',
'sysname': r'"sysname":"(.*?)"',
'system': r'"system":"(.*?)"',
'systemtime': r'"systemTime":"(.*?)"',
'system_name': r'"system_name":"(.*?)"',
'tactic': r'"tactic":"(.*?)"',
'tags': r'"tags":"(.*?)"',
'targetdomainname': r'"targetDomainName":"(.*?)"',
'targetfilename': r'"targetFilename":"(.*?)"',
'targetimage': r'"targetImage":"(.*?)"',
'targetlinkedlogonid': r'"targetLinkedLogonId":"(.*?)"',
'targetlogonid': r'"targetLogonId":"(.*?)"',
'targetobject': r'"targetObject":"(.*?)"',
'targetprocessguid': r'"targetProcessGUID":"(.*?)"',
'targetprocessguid': r'"targetProcessGuid":"(.*?)"',
'targetprocessid': r'"targetProcessId":"(.*?)"',
'targetsid': r'"targetSid":"(.*?)"',
'targetuser': r'"targetUser":"(.*?)"',
'targetusername': r'"targetUserName":"(.*?)"',
'targetusersid': r'"targetUserSid":"(.*?)"',
'task': r'"task":"(.*?)"',
'technique': r'"technique":"(.*?)"',
'tenantid': r'"tenantId":"(.*?)"',
'tenant_id': r'"tenant_id":"(.*?)"',
'terminalsessionid': r'"terminalSessionId":"(.*?)"',
'tgid': r'"tgid":"(.*?)"',
'threadid': r'"threadID":"(.*?)"',
'threatdisplayname': r'"threatDisplayName":"(.*?)"',
'threatfamilyname': r'"threatFamilyName":"(.*?)"',
'timestamp': r'"timestamp":"(.*?)"',
'timezone': r'"timezone":"(.*?)"',
'title': r'"title":"(.*?)"',
'total': r'"total":"(.*?)"',
'total_checks': r'"total_checks":"(.*?)"',
'tsc': r'"tsc":"(.*?)"',
'tty': r'"tty":"(.*?)"',
'tx_bytes': r'"tx_bytes":"(.*?)"',
'tx_dropped': r'"tx_dropped":"(.*?)"',
'tx_errors': r'"tx_errors":"(.*?)"',
'tx_packets': r'"tx_packets":"(.*?)"',
'tx_queue': r'"tx_queue":"(.*?)"',
'type': r'"type":"(.*?)"',
'uid': r'"uid":"(.*?)"',
'uid_after': r'"uid_after":"(.*?)"',
'uid_before': r'"uid_before":"(.*?)"',
'uname_after': r'"uname_after":"(.*?)"',
'uname_before': r'"uname_before":"(.*?)"',
'unknown': r'"unknown":"(.*?)"',
'updated': r'"updated":"(.*?)"',
'updatedat': r'"updatedAt":"(.*?)"',
'url': r'"url":"(.*?)"',
'user': r'"user":"(.*?)"',
'useraccountcontrol': r'"userAccountControl":"(.*?)"',
'userparameters': r'"userParameters":"(.*?)"',
'userworkstations': r'"userWorkstations":"(.*?)"',
'user_interaction': r'"user_interaction":"(.*?)"',
'utctime': r'"utcTime":"(.*?)"',
'utime': r'"utime":"(.*?)"',
'vector': r'"vector":"(.*?)"',
'vendor': r'"vendor":"(.*?)"',
'verdict': r'"verdict":"(.*?)"',
'version': r'"version":"(.*?)"',
'virtualaccount': r'"virtualAccount":"(.*?)"',
'virustotal': r'"virustotal":"(.*?)"',
'vminstanceid': r'"vmInstanceId":"(.*?)"',
'vminstancename': r'"vmInstanceName":"(.*?)"',
'vm_size': r'"vm_size":"(.*?)"',
'vulnerability': r'"vulnerability":"(.*?)"',
'win': r'"win":"(.*?)"'
    }
    extracted_fields = {}
    for field, pattern in patterns.items():
        match = re.search(pattern, json_string)
        extracted_fields[field] = match.group(1) if match else 'N/A'
    # Add the hardcoded SHA-256 key to the extracted fields
    extracted_fields['sha256'] = SHA256_KEY
    return extracted_fields

def save_throttle_data(throttle_data):
    """Saves the throttle tracking data to a JSON file."""
    with open(THROTTLE_FILE, "w") as json_file:
        json.dump(throttle_data, json_file)

def load_throttle_data():
    """Loads the throttle tracking data from a JSON file."""
    if os.path.exists(THROTTLE_FILE):
        try:
            with open(THROTTLE_FILE, "r") as file:
                return json.load(file)
        except json.JSONDecodeError:
            log_message(f"Error: Malformed JSON in {THROTTLE_FILE}")
            return {}
    return {}

def should_send_alert(host, rule_id):
    """Checks if enough time has passed to send an alert for the given host and rule_id."""
    if host == "N/A" or rule_id == "N/A":
        log_message(f"Invalid host ({host}) or rule_id ({rule_id}), skipping alert.")
        return False
    throttle_data = load_throttle_data()  # Load throttle data as a dictionary
    current_time = datetime.now()
    key = f"{host}_{rule_id}"
    if key in throttle_data:
        last_sent_time = datetime.strptime(throttle_data[key], "%Y-%m-%d %H:%M:%S")
        if current_time - last_sent_time < THROTTLE_INTERVAL:
            log_message(f"Alert throttled for {key}. Last sent at {last_sent_time}.")
            return False  # Do not send the alert
    # Update throttle data with the current time
    throttle_data[key] = current_time.strftime("%Y-%m-%d %H:%M:%S")
    save_throttle_data(throttle_data)
    return True  # Allow sending the alert

def post_to_api(extracted_data, custom_headers=None):
    """Posts the extracted data to the API with only non-null fields and logs the response."""
    # Filter out fields with 'N/A' or None values
    filtered_data = {key: value for key, value in extracted_data.items() if value and value != "N/A"}

    # Initialize headers with Content-Type
    headers = {'Content-Type': 'application/json'}
    
    # Add custom headers if provided
    if custom_headers:
        headers.update(custom_headers)
    
    try:
        response = requests.post(API_ENDPOINT, headers=headers, json=filtered_data)
        log_message(f"POST to {API_ENDPOINT} with data: {json.dumps(filtered_data, indent=4)}")
        log_message(f"Response Status Code: {response.status_code}")
        log_message(f"Response Body: {response.text}")
        if response.status_code != 200:
            log_message(f"Failed to post data to {API_ENDPOINT}: {response.status_code}")
        else:
            log_message(f"Data successfully posted to {API_ENDPOINT}")
    except Exception as e:
        log_message(f"Error posting data to {API_ENDPOINT}: {e}")

if __name__ == "__main__":
    log_message("Starting extract_data.py")
    
    # Ensure the alert data file exists
    if not os.path.exists(ALERT_FILE):
        log_message("Alert data file not found.")
        sys.exit(1)
    
    # Read the raw JSON content
    raw_json = read_json_file(ALERT_FILE)
    
    # Extract fields from the JSON data using regex
    extracted_fields = extract_fields(raw_json)
    
    # Define custom headers based on configuration or needs
    custom_headers = {
        'X-Email-Enabled': 'true',
        'X-WhatsApp-Enabled': 'true',
        'X-Email-Score-Threshold': '8',
        'X-WhatsApp-Score-Threshold': '8',
        'X-Ticket-Email': 'soc@company.com',
        'X-Ticket-Email-Score-Threshold': '8',
        'X-Ticket-Email-Subject': 'Custom Security Alert Notification',
        #'X-Ticket-Email-Body':'',
        'X-Source-System': 'production_firewall',
        'X-Attachment-Format': 'txt',
        'X-Sha256': SHA256_KEY,
        'X-Exclude-Ip-Range': '192.168.1.0/24,10.0.0.0/8',
        'X-Exclude-Keywords': 'maintenance,test',
        'X-logs-bucket': 'true'
    }

    # Check if we should send the alert (based on the host and rule_id)
    if should_send_alert(extracted_fields['agent_name'], extracted_fields['rule_id']):
                # Log the extracted values
        log_message(f"Extracted Fields: {json.dumps(extracted_fields, indent=4)}")
        
        # Save extracted fields to a JSON file for later use
        with open(OUTPUT_FILE, "w") as output_file:
            json.dump(extracted_fields, output_file)
        log_message(f"Extracted data saved to {OUTPUT_FILE}")
        
        # Post extracted data to API and log the response with custom headers
        post_to_api(extracted_fields, custom_headers)
    else:
        log_message(f"Alert not sent for rule ID {extracted_fields['rule_id']} from {extracted_fields['agent_name']} due to throttle.")

